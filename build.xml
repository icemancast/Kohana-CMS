<project name="kohana" default="test" basedir=".">
	<!--
	USAGE
	=====
	
	Build a release.zip from a tag.
	$ TAG=3.0.8 ant release-tag

	Update submodules and push back. This won't affect your local clone.
	$ ant update-submodules

	Run unit tests
	$ ant test

	Run unit tests with logging enabled
	$ ant test-log

	-->
	<property environment="env"/>
	<property name="repo" value="git@github.com:kohana/kohana.git"/>
	<property name="branch" value="3.0.x"/>
	<property name="tag" value="${env.TAG}"/>
	<!-- Used by update-submodules2 - not update-submodules -->
	<property name="submodules" value="system,modules/auth,modules/cache,modules/codebench,modules/database,modules/image,modules/oauth,modules/orm,modules/pagination,modules/unittest,modules/userguide"/>
	<property name="release-excludes" value="**/.git,**/.git*,build.xml,phpunit.xml,DEVELOPERS.md,phpunitcc,code_coverage.xml,release-tag,TESTING.md,**/tests"/>

	<target name="clean">
		<!-- Clean up -->
		<delete dir="${basedir}/build"/>
		<!-- Create build directories -->
		<mkdir dir="${basedir}/build/coverage"/>
		<mkdir dir="${basedir}/build/logs"/>
		<mkdir dir="${basedir}/build/release"/>
	</target>
	
	<!-- Run unit tests -->
	<target name="phpunit">
		<exec executable="phpunit" failonerror="true"/>
	</target>

	<!-- Run unit tests and generate junit.xml and clover.xml -->
	<target name="phpunit-log">
		<exec executable="phpunit" failonerror="true">
			<arg line="--coverage-html=${basedir}/build/coverage"/>
			<arg line="--log-junit=${basedir}/build/logs/junit.xml"/>
			<arg line="--coverage-clover=${basedir}/build/logs/clover.xml"/>
		</exec>
	</target>

	<!-- Update submodules -->
	<target name="update-submodules" depends="clean,clone-branch">
		<!-- System -->
		<exec executable="git" failonerror="true" dir="${basedir}/build/release/kohana-${branch}/system">
			<arg line="checkout 3.0.x"/>
		</exec>
		<exec executable="git" failonerror="true" dir="${basedir}/build/release/kohana-${branch}/system">
			<arg line="pull"/>
		</exec>
		<!-- Auth -->
		<exec executable="git" failonerror="true" dir="${basedir}/build/release/kohana-${branch}/modules/auth">
			<arg line="checkout master"/>
		</exec>
		<exec executable="git" failonerror="true" dir="${basedir}/build/release/kohana-${branch}/modules/auth">
			<arg line="pull"/>
		</exec>
		<!-- Cache -->
		<exec executable="git" failonerror="true" dir="${basedir}/build/release/kohana-${branch}/modules/cache">
			<arg line="checkout master"/>
		</exec>
		<exec executable="git" failonerror="true" dir="${basedir}/build/release/kohana-${branch}/modules/cache">
			<arg line="pull"/>
		</exec>
		<!-- Codebench -->
		<exec executable="git" failonerror="true" dir="${basedir}/build/release/kohana-${branch}/modules/codebench">
			<arg line="checkout master"/>
		</exec>
		<exec executable="git" failonerror="true" dir="${basedir}/build/release/kohana-${branch}/modules/codebench">
			<arg line="pull"/>
		</exec>
		<!-- Database -->
		<exec executable="git" failonerror="true" dir="${basedir}/build/release/kohana-${branch}/modules/database">
			<arg line="checkout master"/>
		</exec>
		<exec executable="git" failonerror="true" dir="${basedir}/build/release/kohana-${branch}/modules/database">
			<arg line="pull"/>
		</exec>
		<!-- Image -->
		<exec executable="git" failonerror="true" dir="${basedir}/build/release/kohana-${branch}/modules/image">
			<arg line="checkout master"/>
		</exec>
		<exec executable="git" failonerror="true" dir="${basedir}/build/release/kohana-${branch}/modules/image">
			<arg line="pull"/>
		</exec>
		<!-- OAuth -->
		<exec executable="git" failonerror="true" dir="${basedir}/build/release/kohana-${branch}/modules/oauth">
			<arg line="checkout master"/>
		</exec>
		<exec executable="git" failonerror="true" dir="${basedir}/build/release/kohana-${branch}/modules/oauth">
			<arg line="pull"/>
		</exec>
		<!-- ORM -->
		<exec executable="git" failonerror="true" dir="${basedir}/build/release/kohana-${branch}/modules/orm">
			<arg line="checkout master"/>
		</exec>
		<exec executable="git" failonerror="true" dir="${basedir}/build/release/kohana-${branch}/modules/orm">
			<arg line="pull"/>
		</exec>
		<!-- Pagination -->
		<exec executable="git" failonerror="true" dir="${basedir}/build/release/kohana-${branch}/modules/pagination">
			<arg line="checkout master"/>
		</exec>
		<exec executable="git" failonerror="true" dir="${basedir}/build/release/kohana-${branch}/modules/pagination">
			<arg line="pull"/>
		</exec>
		<!-- Unittest -->
		<exec executable="git" failonerror="true" dir="${basedir}/build/release/kohana-${branch}/modules/unittest">
			<arg line="checkout 3.0.x"/>
		</exec>
		<exec executable="git" failonerror="true" dir="${basedir}/build/release/kohana-${branch}/modules/unittest">
			<arg line="pull"/>
		</exec>
		<!-- Userguide -->
		<exec executable="git" failonerror="true" dir="${basedir}/build/release/kohana-${branch}/modules/userguide">
			<arg line="checkout master"/>
		</exec>
		<exec executable="git" failonerror="true" dir="${basedir}/build/release/kohana-${branch}/modules/userguide">
			<arg line="pull"/>
		</exec>

		<!-- Commit and Push -->
		<exec executable="git" failonerror="true" dir="${basedir}/build/release/kohana-${branch}">
			<arg line="commit -a -m 'Updating submodules'"/>
		</exec>
		<exec executable="git" failonerror="true" dir="${basedir}/build/release/kohana-${branch}">
			<arg line="push"/>
		</exec>
	</target>

	<!-- Update submodules - For when we sort out the submodule branch names -->
	<target name="update-submodules2" depends="clean,clone-branch">
		<for list="${submodules}" param="submodule">
			<sequential>
				<exec executable="git" failonerror="true" dir="${basedir}/build/release/kohana-${branch}/${submodule}">
					<arg line="checkout ${branch}"/>
				</exec>
				<exec executable="git" failonerror="true" dir="${basedir}/build/release/kohana-${branch}/${submodule}">
					<arg line="pull"/>
				</exec>
			</sequential>
		</for>

		<!-- Commit and Push -->
		<exec executable="git" failonerror="true" dir="${basedir}/build/release/kohana-${branch}">
			<arg line="commit -a -m 'Updating submodules'"/>
		</exec>
		<exec executable="git" failonerror="true" dir="${basedir}/build/release/kohana-${branch}">
			<arg line="push"/>
		</exec>
	</target>

	<!-- Check if a specific tag exists -->
	<target name="tag-exists">
		<echo message="TODO: Check if tag (${tag}) exists."/>
	</target>

	<!-- Clone a specific tag -->
	<target name="clone-tag">
		<exec executable="git" failonerror="true" dir="${basedir}/build/release">
			<arg line="clone ${repo} kohana-${tag}"/>
		</exec>
		<exec executable="git" failonerror="true" dir="${basedir}/build/release/kohana-${tag}">
			<arg line="checkout ${tag}"/>
		</exec>
		<exec executable="git" failonerror="true" dir="${basedir}/build/release/kohana-${tag}">
			<arg line="submodule update --init --recursive"/>
		</exec>
	</target>

	<!-- Clone a specific branch -->
	<target name="clone-branch">
		<exec executable="git" failonerror="true" dir="${basedir}/build/release">
			<arg line="clone ${repo} kohana-${branch}"/>
		</exec>
		<exec executable="git" failonerror="true" dir="${basedir}/build/release/kohana-${branch}">
			<arg line="checkout ${branch}"/>
		</exec>
		<exec executable="git" failonerror="true" dir="${basedir}/build/release/kohana-${branch}">
			<arg line="submodule update --init --recursive"/>
		</exec>
	</target>

	<!-- Build a release of a specific tag -->
	<target name="release-tag" depends="clean,tag-exists,clone-tag,test-tag">
		<zip destfile="${basedir}/build/kohana-${tag}.zip">
			<fileset dir="${basedir}/build/release" excludes="${release-excludes}"/>
		</zip>
	</target>

	<target name="test-tag">
		<exec executable="phpunit" failonerror="true" dir="${basedir}/build/release/kohana-${tag}"/>
	</target>

	<target name="test-branch">
		<exec executable="phpunit" failonerror="true" dir="${basedir}/build/release/kohana-${branch}"/>
	</target>

	<target name="test" depends="clean,phpunit"/>
	<target name="test-log" depends="clean,phpunit-log"/>
</project>
